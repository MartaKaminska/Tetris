import { canAddBrick, canMoveBrick } from '../function/moveDownBrick';

describe('move brick', () => {
	it('can add brick - down collision with bottom board', () => {
		const w = 8;
		const h = 10;
		const dir = -1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 0,
						y: 5,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['false', 0];
		expect(result).to.deep.equal(expected);
	});
	it('can add brick - without down collision with bottom board', () => {
		const w = 8;
		const h = 10;
		const dir = -1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 0,
						y: 2,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['false', 0];
		expect(result).to.not.deep.equal(expected);
	});
	it('side collision for current dir (with walls) - move right', () => {
		const w = 8;
		const h = 10;
		const dir = 1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 6,
						y: 0,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['false', 0];
		expect(result).to.deep.equal(expected);
	});
	it('without side collision for current dir (with walls and brick)- move right', () => {
		const w = 8;
		const h = 10;
		const dir = 1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 4,
						y: 0,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['true', 1];
		expect(result).to.deep.equal(expected);
	});
	it('side collision for current dir (with brick) - move left', () => {
		const w = 8;
		const h = 10;
		const dir = -1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 4,
						y: 8,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['false', 0];
		expect(result).to.deep.equal(expected);
	});
	it('without side collision for current dir (with walls and brick)- move left', () => {
		const w = 8;
		const h = 10;
		const dir = -1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 4,
						y: 0,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['true', -1];
		expect(result).to.deep.equal(expected);
	});
	it('check collision with bottom brick - move left', () => {
		const w = 8;
		const h = 10;
		const dir = -1;
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 2,
						y: 6,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const result = canAddBrick(board, brick, w, h, dir);
		const expected = ['false', 0];
		expect(result).to.deep.equal(expected);
	});
	it('add tetrim to board - down collision with bottom board', () => {
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: -2,
						y: 6,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const newBoard = canMoveBrick(board, brick);
		const expectedBoard = [ ['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['A','','','','','','',''],
							['A','','','','','','',''],
							['A','','','A','','','',''],
							['A','A','A','A','','','','']];;
		expect(newBoard).to.deep.equal(expectedBoard);
	});
	it('add tetrim to board - down collision with brick', () => {
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: -1,
						y: 5,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const newBoard = canMoveBrick(board, brick);
		const expectedBoard = [ ['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','A','','','','','',''],
							['','A','','','','','',''],
							['','A','','','','','',''],
							['','A','','A','','','',''],
							['','A','A','A','','','','']];;
		expect(newBoard).to.deep.equal(expectedBoard);
	});
	it('add tetrim to board - down collision with brick', () => {
		const board = [ ['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','','','','',''],
						['','','','A','','','',''],
						['','A','A','A','','','','']];
		const brick = { 
						x: 5,
						y: 5,
						shape: [ [0, 0,  'I',  0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 'I', 0, 0],
								[0, 0, 0, 0, 0]]
						};
		const newBoard = canMoveBrick(board, brick);
		const expectedBoard = [ ['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','','','','','','',''],
							['','A','','','','','',''],
							['','A','','','','','',''],
							['','A','','','','','',''],
							['','A','','A','','','',''],
							['','A','A','A','','','','']];;
		expect(newBoard).to.not.deep.equal(expectedBoard);
	});
});